---
import { type CollectionEntry, getCollection } from "astro:content";
import Posts from "@layouts/Posts.astro";
import PostDetails from "@layouts/PostDetails.astro";
import getSortedPosts from "@utils/getSortedPosts";
import getPageNumbers from "@utils/getPageNumbers";
import getPagination from "@utils/getPagination";

const lang = "zh-hant" as const;

export interface Props {
  post: CollectionEntry<"blog">;
}

export async function getStaticPaths() {
  const all = await getCollection("blog");
  // Use literal here to avoid scope issues during build-time transformation
  const posts = all.filter(
    (p: CollectionEntry<"blog">) => !p.data.draft && p.data.lang === "zh-hant"
  );

  const postResult = posts.map((post: CollectionEntry<"blog">) => {
    const s = (post.data as any).baseSlug ?? post.slug;
    return {
      params: { slug: s },
      props: { post: { ...post, slug: s } as any },
    };
  });

  const pagePaths = getPageNumbers(posts.length).map(pageNum => ({
    params: { slug: String(pageNum) },
  }));

  return [...postResult, ...pagePaths];
}

const { slug } = Astro.params;
const { post } = Astro.props;

const posts = (await getCollection("blog")).filter(
  (p: CollectionEntry<"blog">) => p.data.lang === lang
);

const sortedPosts = getSortedPosts(posts);

const pagination = getPagination({
  posts: sortedPosts,
  page: slug,
});
---

{post ? <PostDetails post={post} /> : <Posts {...pagination} />}
