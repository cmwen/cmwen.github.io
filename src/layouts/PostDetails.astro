---
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import Tag from "@components/Tag.astro";
import Datetime from "@components/Datetime";
import type { CollectionEntry } from "astro:content";
import { slugifyStr } from "@utils/slugify";
import ShareLinks from "@components/ShareLinks.astro";
import { SITE } from "@config";
import { defaultLocale, type Locale } from "@i18n/config";
import ChatLink from "@components/ChatLink";
import AudioPlayer from "@components/AudioPlayer";

export interface Props {
  post: CollectionEntry<"blog">;
  lang?: Locale;
}

const { post, lang = (post.data.lang as Locale) ?? defaultLocale } =
  Astro.props;

const {
  title,
  author,
  description,
  ogImage,
  canonicalURL,
  pubDatetime,
  modDatetime,
  tags,
  llmKeyIdeas,
} = post.data;

const { Content } = await post.render();

const ogImageUrl = typeof ogImage === "string" ? ogImage : ogImage?.src;
const ogUrl = new URL(
  ogImageUrl ?? `/posts/${slugifyStr(title)}.png`,
  Astro.url.origin
).href;

// Build alternates: if sibling translation exists, point to it; otherwise, fall back to locale home
let alternates: { en?: string; "zh-hant"?: string } | undefined;
try {
  const slug = (post.data as any)?.baseSlug ?? post.slug;
  const baseEn = new URL(`/posts/${slug}/`, Astro.site).href;
  const baseZh = new URL(`/zh-hant/posts/${slug}/`, Astro.site).href;
  alternates = {
    en: lang === "en" ? new URL(Astro.url.pathname, Astro.site).href : baseEn,
    "zh-hant":
      lang === "zh-hant"
        ? new URL(Astro.url.pathname, Astro.site).href
        : baseZh,
  };
} catch {
  // Ignore errors when building alternates
}

const layoutProps = {
  title: `${title} | ${SITE.title}`,
  author,
  description,
  pubDatetime,
  modDatetime,
  canonicalURL,
  ogImage: ogUrl,
  scrollSmooth: true,
  lang,
  alternates,
};
---

<Layout {...layoutProps}>
  <Header {lang} />

  <!-- <div class="progress-container fixed top-0 z-10 h-1 w-full bg-skin-fill">
    <div class="progress-bar h-1 w-0 bg-skin-accent" id="myBar"></div>
  </div> -->

  <div class="mx-auto flex w-full max-w-7xl justify-start px-2">
    <button
      class="focus-outline mb-2 mt-8 flex hover:opacity-75"
      onclick="(() => (history.length === 1) ? window.location = '/' : history.back())()"
    >
      <svg xmlns="http://www.w3.org/2000/svg"
        ><path
          d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"
        ></path>
      </svg><span>{lang === "zh-hant" ? "返回" : "Go back"}</span>
    </button>
  </div>
  <main id="main-content" class="post-layout">
    <!-- Sidebar that moves to top on mobile -->
    <aside class="post-sidebar">
      <div class="sidebar-sticky">
        <AudioPlayer client:only="react" slug={post.slug} lang={lang} />
        {
          Array.isArray(llmKeyIdeas) && llmKeyIdeas.length > 0 && (
            <ChatLink
              client:only="react"
              title={title}
              url={Astro.url.href}
              keyIdeas={llmKeyIdeas}
              lang={lang}
            />
          )
        }
      </div>
    </aside>
    <div class="post-content">
      <h1 transition:name={slugifyStr(title)} class="post-title">{title}</h1>
      <Datetime
        pubDatetime={pubDatetime}
        modDatetime={modDatetime}
        size="lg"
        className="my-2"
      />
      <article id="article" role="article" class="prose mx-auto mt-8 max-w-3xl">
        <Content />
      </article>

      <ul class="my-8">
        {
          tags.map(tag => (
            <Tag
              tag={slugifyStr(tag)}
              basePrefix={lang === "zh-hant" ? "/zh-hant" : ""}
            />
          ))
        }
      </ul>

      <div
        class="flex flex-col-reverse items-center justify-between gap-6 sm:flex-row-reverse sm:items-end sm:gap-4"
      >
        <button
          id="back-to-top"
          class="focus-outline whitespace-nowrap py-1 hover:opacity-75"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="rotate-90">
            <path
              d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"
            ></path>
          </svg>
          <span>{lang === "zh-hant" ? "回到頂端" : "Back to Top"}</span>
        </button>

        <ShareLinks />
      </div>
    </div>
  </main>
  <Footer />
</Layout>

<style>
  main {
    @apply mx-auto w-full max-w-7xl px-4 pb-12;
  }

  .post-layout {
    display: flex;
    flex-direction: column;
  }

  @media (min-width: 1024px) {
    .post-layout {
      flex-direction: row;
      gap: 2rem;
    }
  }

  .post-content {
    flex: 1;
    /* On mobile, content comes after sidebar */
    order: 2;
  }

  @media (min-width: 1024px) {
    .post-content {
      max-width: 48rem;
      /* On desktop, content comes first (left side) */
      order: 1;
    }
  }

  .post-sidebar {
    /* On mobile, sidebar appears first (at top) */
    order: 1;
  }

  @media (min-width: 1024px) {
    .post-sidebar {
      width: 20rem;
      /* On desktop, sidebar comes second (right side) */
      order: 2;
    }
  }

  @media (min-width: 1280px) {
    .post-sidebar {
      width: 24rem;
    }
  }

  @media (min-width: 1024px) {
    .sidebar-sticky {
      position: sticky;
      top: 6rem;
    }
  }

  .post-title {
    @apply text-2xl font-semibold text-skin-accent;
  }
</style>

<script is:inline>
  /** Create a progress indicator
   *  at the top */
  function createProgressBar() {
    // Create the main container div
    const progressContainer = document.createElement("div");
    progressContainer.className =
      "progress-container fixed top-0 z-10 h-1 w-full bg-skin-fill";

    // Create the progress bar div
    const progressBar = document.createElement("div");
    progressBar.className = "progress-bar h-1 w-0 bg-skin-accent";
    progressBar.id = "myBar";

    // Append the progress bar to the progress container
    progressContainer.appendChild(progressBar);

    // Append the progress container to the document body or any other desired parent element
    document.body.appendChild(progressContainer);
  }
  createProgressBar();

  /** Update the progress bar
   *  when user scrolls */
  function updateScrollProgress() {
    const winScroll =
      document.body.scrollTop || document.documentElement.scrollTop;
    const height =
      document.documentElement.scrollHeight -
      document.documentElement.clientHeight;
    const scrolled = (winScroll / height) * 100;
    if (document) {
      const myBar = document.getElementById("myBar");
      if (myBar) {
        myBar.style.width = scrolled + "%";
      }
    }
  }
  document.addEventListener("scroll", updateScrollProgress);

  /** Attaches links to headings in the document,
   *  allowing sharing of sections easily */
  function addHeadingLinks() {
    let headings = Array.from(document.querySelectorAll("h2, h3, h4, h5, h6"));
    for (let heading of headings) {
      heading.classList.add("group");
      let link = document.createElement("a");
      link.innerText = "#";
      link.className = "heading-link hidden group-hover:inline-block ml-2";
      link.href = "#" + heading.id;
      link.ariaHidden = "true";
      heading.appendChild(link);
    }
  }
  addHeadingLinks();

  /** Attaches copy buttons to code blocks in the document,
   * allowing users to copy code easily. */
  function attachCopyButtons() {
    let copyButtonLabel = "Copy";
    let codeBlocks = Array.from(document.querySelectorAll("pre"));

    for (let codeBlock of codeBlocks) {
      let wrapper = document.createElement("div");
      wrapper.style.position = "relative";

      let copyButton = document.createElement("button");
      copyButton.className =
        "copy-code absolute right-3 -top-3 rounded bg-skin-card px-2 py-1 text-xs leading-4 text-skin-base font-medium";
      copyButton.innerHTML = copyButtonLabel;
      codeBlock.setAttribute("tabindex", "0");
      codeBlock.appendChild(copyButton);

      // wrap codebock with relative parent element
      codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block, button) {
      let code = block.querySelector("code");
      let text = code?.innerText;

      await navigator.clipboard.writeText(text ?? "");

      // visual feedback that task is completed
      button.innerText = "Copied";

      setTimeout(() => {
        button.innerText = copyButtonLabel;
      }, 700);
    }
  }
  attachCopyButtons();

  /** Scrolls the document to the top when
   * the "Back to Top" button is clicked. */
  function backToTop() {
    document.querySelector("#back-to-top")?.addEventListener("click", () => {
      document.body.scrollTop = 0; // For Safari
      document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
    });
  }
  backToTop();
</script>
